/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package uk.co.kleindelao.demo.henrys.basket;

import static java.util.Map.entry;
import static org.apache.commons.lang3.RandomUtils.nextInt;
import static org.assertj.core.api.BDDAssertions.then;

import java.math.BigDecimal;
import java.time.LocalDate;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

class ShoppingProcessTest {
  private final ShoppingProcess shoppingProcess = new ShoppingProcess(LocalDate.now());

  @Nested
  class CatalogueTests {
    @Test
    void shouldHaveACatalogue() {
      then(shoppingProcess.getCatalogue()).isNotNull();
    }

    @Test
    void shouldHaveNonEmptyCatalogue() {
      then(shoppingProcess.getCatalogue()).isNotEmpty();
    }

    @Test
    void shouldContainSoupBreadMilkApples() {
      then(
          shoppingProcess.getCatalogue()).anySatisfy(
                                             item -> itemMatches(item, "soup", "tin", "0.65"))
                                         .anySatisfy(
                                             item -> itemMatches(item, "bread", "loaf", "0.8"))
                                         .anySatisfy(
                                             item -> itemMatches(item, "milk", "bottle", "1.3"))
                                         .anySatisfy(
                                             item -> itemMatches(item, "apples", "single", "0.1"));
    }

    private void itemMatches(final ShoppingItem item, final String expectedName,
                             final String expectedUnit,
                             final String expectedCostValue) {
      then(item.name()).isEqualTo(expectedName);
      then(item.unit()).isEqualTo(expectedUnit);
      then(item.cost()).isEqualTo(new BigDecimal(expectedCostValue));
    }
  }

  @Nested
  class BasketTests {
    @Test
    void shouldAddItemsByIndex() {
      // Given
      final var numberOfItems = nextInt(1, 10);

      // When
      shoppingProcess.addItems(1, numberOfItems);

      // Then
      then(shoppingProcess.getBasket()
                          .getContent()).containsOnly(
          entry(new ShoppingItem("bread", "loaf", new BigDecimal("0.8")), numberOfItems));
    }
  }
}
